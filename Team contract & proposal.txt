# Team Contract
## Communication
1. **Team Meetings** 
We will have weekly meetings on zoom each Thursday, at 7 pm. Each meeting will be 2 hours. 


2. **Assistance** 
We will use school email or WeChat to contact each other. A WeChat group has already been created. We should expect a response as soon as possible, but we should respond every night or within 24 hours. 


3. **Respect** 
We will ensure that every member is present for all meetings. If someone can’t make a meeting, we will give him/her a meeting recap. 
Missing more than 1 weekly meetings is unacceptable except in emergency circumstances (we will let members of our team vote to decide what counts as emergencies). If someone misses more than 1 meetings, that member will have double the amount of his/her original workload. Late for more than 20 minutes is the same as adsent. 
We will make sure all the members have the opportunity to speak by using our WeChat group. 


## Collaboration
4. **Work Distribution** 
We will mainly divide the work by each tool. Yanjie and Shuyuan will work on the find shortest path tool with the Dijkstra’s algorithm, Stacey and Jianchen will work on the finding cluster tool with strongly connected component algorithm and BFS. Since the finding cluster tool requires more algorithm and will be more complex, any unforeseen work or unexpected complications will be assigned to Yanjie and Shuyuan. 


5. **Time Commitment** 
Our time commitment will be approximately 2-5 hours per week for each member. When a member has a busier week (like exams or other commitments), we will assign less work to that member that week, and we’ll assign more work back to him/her for other weeks. When new commitments inevitably occur, we will let the other member in our smaller work to finish the work, or the member that missed more than 1 meeting. 


6. **Conflict Resolution** 
When there is a conflict we will let the others in the group decide who is the right one. Any disagreement will be solved by voting and following the majority. If there is a tie and we still can’t resolve it, we should contact our mentor. 
If a member can’t finish his/her assigned task, he/she should inform others 24 hours before every team meeting on thursday. If he/she fail to do so more than 2 times, we will inform our mentor. 


## Signatures
Yanjie Han(yanjieh2),Shuyuan Gao(sg80), Jianchen hong(jh104), Stacey Lee(staceyl2)


Project proposal 
## Leading Question 
By using flight routes and airports data, we want to create tools for travel enthusiasts to find the best way to travel. There’re 2 tools: 
1. Find the shortest routes by airport. 
   1. By taking the source and destination airports from user input, this tool generates the shortest routes in terms of which airline to take and all the airports in between. We will achieve this by using Dijkstra’s Shortest Path algorithm. 
2. Find a cluster of places that can be visited in order
   1. By taking the user’s nearest airport from user input, this tool will use Tarjan’s strongly connected component algorithm to find a list of airports that are strongly connected to the current airport and list them out using BFS. We chose BFS over DFS because we want the user’s travel to be as convenient as possible without needing to layover frequently. 


## Dataset Acquisition
OpenFlights Airport, airline, and route data


## Data Format
The data files we’ll use are routes.txt, airlines.txt, and airports.txt. They will be put in the /dataset directory. The dataset is in the format of comma separated values. Routes.txt has 67663 entries, airlines.txt has 5888 entries, and airports.txt has 7698 entries. We will be using all the data for accuracy, even though that’s a lot of data. 
For our program, all thel input and output locations will be airports in the format of 3-letter IATA codes. There will not be any country or city names involved. 


## Data Correction
When we find an missing entry in any of the column we need, we will delete that entry completely. For latitude and longitude data, we will delete the data that are out of the correct range (-90 to 90 for latitude and -180 to 180 for longitude). 


## Data Storage
Adjacency list (with weights) to store routes: because Tarjan’s strongly connected components algorithm requires a directed graph as input, we will use an adjacency list to represent all the routes available. Since the routes graph is probably sparse, we will use an adjacency list over an adjacency matrix for efficiency.
Map to store airlines' name, airports’ latitudes, and longitude with keys in routes.txt.: we will use airlines’ name for output readability, since routes.txt only has airline code and identifiers. We will use airports’ latitude and longitude to complete the adjacency list edge weights. 
The storage cost for the adjacency list will be approximately O(V+E), where V is the number of airports in the data file and E is the number of routes.The space complexity for each map is O(n), where n is the number of airports. 


## Algorithm 
1. Dijkstra’s Shortest Path Algorithm
   1. Function Inputs: takes 2 airports from user input in the terminal. 
   2. Function Outputs: prints the airlines and airports in between. 
   3. Function Efficiency: for an adjacency list, Dijkstra’s algorithm’s time complexity is O(V+E)logV. Its space complexity will be O(V+E). 
2. Tarjan’s Strongly Connected Component Algorithm
   1. Function Inputs: takes 1 airport from user input in the terminal. 
   2. Function Outputs: a list of airports to visit in BFS order. 
   3. Function Efficiency: since Tarjan’s Strongly Connected Component Algorithm is based off DFS, its time complexity will be O(V+E), and space complexity will be O(V). 




## Timeline
Week 1 (Nov7-Nov11):
To these in order: 
1. Complete data correction/cleaning. 
2. Create airports’ latitude and airports’ longitude map. 
3. Create routes adjacency list (use the maps to calculate weights). 


Week 2 (Nov14-Nov18) [Mid-project checkin]
* Yanjie and Shuyuan: implement the Dijkstra’s Shortest Path Algorithm. 
* Stacey and Jianchen: implement Tarjan’s Strongly Connected Component Algorithm. 


Week 3 (Nov 21-Nov 25)
* Yanjie and Shuyuan: create airlines’ name map and convert output airline from airline ID to airline name for readability. 
* Stacey and Jianchen: implement BFS. 


Week 4 (Nov 28-Dec 2)
* Finish any code left behind. 
* Clean up prompts/output formats in terminal. 
* Finish writing tests cases. 


Week 5 (Dec 5-Dec8)
* Finish README
* Finish written report
* Final presentation video planning, slides, editing